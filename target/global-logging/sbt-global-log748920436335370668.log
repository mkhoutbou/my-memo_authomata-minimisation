[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\DELL\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\DELL\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Oracle Corporation Java 17.0.2)
[debug]       Load.loadUnit: plugins took 123.3228ms
[debug]       Load.loadUnit: defsScala took 0.309ms
[debug] [Loading] Scanning directory C:\Users\DELL\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\DELL\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.5487 ms
[debug]           Load.resolveProject(global-plugins) took 49.2105ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\DELL\.sbt\1.0\plugins, plugins: List(<none>))) took 93.9926ms
[debug] [Loading] Done in C:\Users\DELL\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 122.8078ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2988ms
[debug]     Load.loadUnit(file:/C:/Users/DELL/.sbt/1.0/plugins/, ...) took 257.3549ms
[debug]   Load.apply: load took 495.4913ms
[debug]   Load.apply: resolveProjects took 7.0007ms
[debug]   Load.apply: finalTransforms took 91.4992ms
[debug]   Load.apply: config.delegates took 14.8032ms
[debug]   Load.apply: Def.make(settings)... took 737.8552ms
[debug]   Load.apply: structureIndex took 178.7314ms
[debug]   Load.apply: mkStreams took 2.1691ms
[info] loading global plugins from C:\Users\DELL\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5503.5889ms
[debug]           Load.loadUnit: plugins took 32.5947ms
[debug]           Load.loadUnit: defsScala took 0.0057ms
[debug] [Loading] Scanning directory D:\Entretainments\Spark\project
[debug]             Load.loadUnit: mkEval took 6.832ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Entretainments\Spark\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.6494 ms
[info] loading settings for project spark-build from idea.sbt ...
[debug]               Load.resolveProject(spark-build) took 3.2052ms
[debug]             Load.loadTransitive: finalizeProject(Project(id spark-build, base: D:\Entretainments\Spark\project, plugins: List(<none>))) took 6.6201ms
[debug] [Loading] Done in D:\Entretainments\Spark\project, returning: (spark-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 167.5646ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.5371ms
[debug]         Load.loadUnit(file:/D:/Entretainments/Spark/project/, ...) took 207.8299ms
[debug]       Load.apply: load took 209.8168ms
[debug]       Load.apply: resolveProjects took 0.2012ms
[debug]       Load.apply: finalTransforms took 15.5878ms
[debug]       Load.apply: config.delegates took 0.5626ms
[debug]       Load.apply: Def.make(settings)... took 138.4641ms
[debug]       Load.apply: structureIndex took 47.9543ms
[debug]       Load.apply: mkStreams took 0.0024ms
[info] loading project definition from D:\Entretainments\Spark\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1148.3557ms
[debug]     Load.loadUnit: defsScala took 0.0167ms
[debug] [Loading] Scanning directory D:\Entretainments\Spark
[debug]       Load.loadUnit: mkEval took 0.2241ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.533 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 47.8887ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\Entretainments\Spark, plugins: List(<none>))) took 53.4657ms
[debug] [Loading] Done in D:\Entretainments\Spark, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 205.7345ms
[debug]     Load.loadUnit: cleanEvalClasses took 9.7409ms
[debug]   Load.loadUnit(file:/D:/Entretainments/Spark/, ...) took 1364.6917ms
[debug] Load.apply: load took 1366.4096ms
[debug] Load.apply: resolveProjects took 0.132ms
[debug] Load.apply: finalTransforms took 37.549ms
[debug] Load.apply: config.delegates took 0.4498ms
[debug] Load.apply: Def.make(settings)... took 126.319ms
[debug] Load.apply: structureIndex took 62.0974ms
[debug] Load.apply: mkStreams took 0.0022ms
[info] set current project to Spark (in build file:/D:/Entretainments/Spark/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 50692 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 50692, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Spark (in build file:/D:/Entretainments/Spark/)
[debug] > Exec(idea-shell, None, None)
